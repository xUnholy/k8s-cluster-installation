---
- name: 'APT Installation'
  when: ansible_os_family|lower == 'debian'
  block:
  - name: 'containerd | ensure docker.io apt repository public key is installed'
    ansible.builtin.apt_key:
      url: '{{ cri_containerd_repo_gpgkey }}'
  - name: 'containerd | ensure docker.io apt repository is enabled'
    ansible.builtin.apt_repository:
      repo: 'deb {{ cri_containerd_repo_base_url }} {{ ansible_distribution_release }} stable'
      state: 'present'
  # this is to prevent apt upgrade from breaking kubernetes
  - name: 'containerd | pin package version to prevent os upgrade clubbing'
    ansible.builtin.template:
      src: 'apt-preferences.d/containerd.j2'
      dest: '/etc/apt/preferences.d/containerd'
      owner: 'root'
      mode: 0644
  - name: 'containerd | install package from apt repository'
    ansible.builtin.apt:
      name:
        - '{{ cri_containerd_package_name[cri_containerd_version | string] }}'
      state: 'present'
      update_cache: true
      cache_valid_time: 3600

- name: 'containerd | ensure "{{ cri_containerd_config_dir }}" config directory'
  ansible.builtin.file:
    path: '{{ cri_containerd_config_dir }}'
    state: 'directory'
    mode: 0755
    owner: 'root'
    group: 'root'

# This is an idempotent check to ensure that the default configuration is present
- name: 'containerd | check existing config.toml file'
  ansible.builtin.stat:
    path: '{{ cri_containerd_config_dir }}/config.toml'
  register: 'containerd_config_file'

- name: 'containerd | generate configuration file'
  ansible.builtin.shell: |
    containerd config default
  register: 'containerd_default_config_file'
  changed_when: false
  when: 'containerd_config_file.stat.exists'

- name: 'containerd | ensure default configuration'
  ansible.builtin.copy:
    dest: '{{ cri_containerd_config_dir }}/config.toml'
    content: '{{ containerd_default_config_file.stdout }}'
  when: containerd_default_config_file.stdout|md5 != containerd_config_file.stat.checksum
  notify: restart cri

- include_tasks: 'crictl.yml'
